"use strict";(self.webpackChunkgorm=self.webpackChunkgorm||[]).push([[1235],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),c=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,f=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=p;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1040:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],s={title:"Serializer",layout:"page"},o=void 0,c={unversionedId:"serializer",id:"serializer",title:"Serializer",description:"Serializer is an extensible interface that allows to customize how to serialize and deserialize data with databasae.",source:"@site/docs/serializer.md",sourceDirName:".",slug:"/serializer",permalink:"/gorm/docs/serializer",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/serializer.md",tags:[],version:"current",frontMatter:{title:"Serializer",layout:"page"},sidebar:"tutorialSidebar",previous:{title:"\u5b89\u5168",permalink:"/gorm/docs/security"},next:{title:"\u4f1a\u8bdd",permalink:"/gorm/docs/session"}},u={},d=[{value:"Register Serializer",id:"register-serializer",level:2},{value:"Customized Serializer Type",id:"customized-serializer-type",level:2}],p={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Serializer is an extensible interface that allows to customize how to serialize and deserialize data with databasae."),(0,i.kt)("p",null,"GORM provides some default serializers: ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"gob"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"unixtime"),", here is a quick example of how to use it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Name        []byte                 `gorm:"serializer:json"`\n    Roles       Roles                  `gorm:"serializer:json"`\n    Contracts   map[string]interface{} `gorm:"serializer:json"`\n    JobInfo     Job                    `gorm:"type:bytes;serializer:gob"`\n    CreatedTime int64                  `gorm:"serializer:unixtime;type:time"` // store int as datetime into database\n}\n\ntype Roles []string\n\ntype Job struct {\n    Title    string\n    Location string\n    IsIntern bool\n}\n\ncreatedAt := time.Date(2020, 1, 1, 0, 8, 0, 0, time.UTC)\ndata := User{\n  Name:        []byte("jinzhu"),\n  Roles:       []string{"admin", "owner"},\n  Contracts:   map[string]interface{}{"name": "jinzhu", "age": 10},\n  CreatedTime: createdAt.Unix(),\n  JobInfo: Job{\n    Title:    "Developer",\n    Location: "NY",\n    IsIntern: false,\n  },\n}\n\nDB.Create(&data)\n// INSERT INTO `users` (`name`,`roles`,`contracts`,`job_info`,`created_time`) VALUES\n//   ("\\"amluemh1\\"","[\\"admin\\",\\"owner\\"]","{\\"age\\":10,\\"name\\":\\"jinzhu\\"}",<gob binary>,"2020-01-01 00:08:00")\n\nvar result User\nDB.First(&result, "id = ?", data.ID)\n// result => User{\n//   Name:        []byte("jinzhu"),\n//   Roles:       []string{"admin", "owner"},\n//   Contracts:   map[string]interface{}{"name": "jinzhu", "age": 10},\n//   CreatedTime: createdAt.Unix(),\n//   JobInfo: Job{\n//     Title:    "Developer",\n//     Location: "NY",\n//     IsIntern: false,\n//   },\n// }\n\nDB.Where(User{Name: []byte("jinzhu")}).Take(&result)\n// SELECT * FROM `users` WHERE `users`.`name` = "\\"amluemh1\\"\n')),(0,i.kt)("h2",{id:"register-serializer"},"Register Serializer"),(0,i.kt)("p",null,"A Serializer needs to implement how to serialize and deserialize data, so it requires to implement the the following interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import "gorm.io/gorm/schema"\n\ntype SerializerInterface interface {\n    Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) error\n    SerializerValuerInterface\n}\n\ntype SerializerValuerInterface interface {\n    Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error)\n}\n')),(0,i.kt)("p",null,"For example, the default ",(0,i.kt)("inlineCode",{parentName:"p"},"JSONSerializer")," is implemented like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// JSONSerializer json serializer\ntype JSONSerializer struct {\n}\n\n// Scan implements serializer interface\nfunc (JSONSerializer) Scan(ctx context.Context, field *Field, dst reflect.Value, dbValue interface{}) (err error) {\n    fieldValue := reflect.New(field.FieldType)\n\n    if dbValue != nil {\n        var bytes []byte\n        switch v := dbValue.(type) {\n        case []byte:\n            bytes = v\n        case string:\n            bytes = []byte(v)\n        default:\n            return fmt.Errorf("failed to unmarshal JSONB value: %#v", dbValue)\n        }\n\n        err = json.Unmarshal(bytes, fieldValue.Interface())\n    }\n\n    field.ReflectValueOf(ctx, dst).Set(fieldValue.Elem())\n    return\n}\n\n// Value implements serializer interface\nfunc (JSONSerializer) Value(ctx context.Context, field *Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {\n    return json.Marshal(fieldValue)\n}\n')),(0,i.kt)("p",null,"And registered with the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'schema.RegisterSerializer("json", JSONSerializer{})\n')),(0,i.kt)("p",null,"After registering a serializer, you can use it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"serializer")," tag, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Name []byte `gorm:"serializer:json"`\n}\n')),(0,i.kt)("h2",{id:"customized-serializer-type"},"Customized Serializer Type"),(0,i.kt)("p",null,"You can use a registered serializer with tags, you are also allowed to create a customized struct that implements the above ",(0,i.kt)("inlineCode",{parentName:"p"},"SerializerInterface")," and use it as a field type directly, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type EncryptedString string\n\n// ctx: contains request-scoped values\n// field: the field using the serializer, contains GORM settings, struct tags\n// dst: current model value, `user` in the below example\n// dbValue: current field\'s value in database\nfunc (es *EncryptedString) Scan(ctx context.Context, field *schema.Field, dst reflect.Value, dbValue interface{}) (err error) {\n    switch value := dbValue.(type) {\n    case []byte:\n        *es = EncryptedString(bytes.TrimPrefix(value, []byte("hello")))\n    case string:\n        *es = EncryptedString(strings.TrimPrefix(value, "hello"))\n    default:\n        return fmt.Errorf("unsupported data %#v", dbValue)\n    }\n    return nil\n}\n\n// ctx: contains request-scoped values\n// field: the field using the serializer, contains GORM settings, struct tags\n// dst: current model value, `user` in the below example\n// fieldValue: current field\'s value of the dst\nfunc (es EncryptedString) Value(ctx context.Context, field *schema.Field, dst reflect.Value, fieldValue interface{}) (interface{}, error) {\n    return "hello" + string(es), nil\n}\n\ntype User struct {\n    gorm.Model\n    Password EncryptedString\n}\n\ndata := User{\n    Password: EncryptedString("pass"),\n}\n\nDB.Create(&data)\n// INSERT INTO `serializer_structs` (`password`) VALUES ("hellopass")\n\nvar result User\nDB.First(&result, "id = ?", data.ID)\n// result => User{\n//   Password: EncryptedString("pass"),\n// }\n\nDB.Where(User{Password: EncryptedString("pass")}).Take(&result)\n// SELECT * FROM `users` WHERE `users`.`password` = "hellopass"\n')))}m.isMDXComponent=!0}}]);