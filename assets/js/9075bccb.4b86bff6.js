"use strict";(self.webpackChunkgorm=self.webpackChunkgorm||[]).push([[4174],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),h=a,c=p["".concat(l,".").concat(h)]||p[h]||m[h]||i;return t?r.createElement(c,o(o({ref:n},d),{},{components:t})):r.createElement(c,o({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9204:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={title:"\u94fe\u5f0f\u65b9\u6cd5",layout:"page"},l=void 0,u={unversionedId:"method_chaining",id:"method_chaining",title:"\u94fe\u5f0f\u65b9\u6cd5",description:"GORM \u5141\u8bb8\u8fdb\u884c\u94fe\u5f0f\u64cd\u4f5c\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4ee3\u7801\uff1a",source:"@site/docs/method_chaining.md",sourceDirName:".",slug:"/method_chaining",permalink:"/gorm/docs/method_chaining",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/method_chaining.md",tags:[],version:"current",frontMatter:{title:"\u94fe\u5f0f\u65b9\u6cd5",layout:"page"},sidebar:"tutorialSidebar",previous:{title:"Many To Many",permalink:"/gorm/docs/many_to_many"},next:{title:"\u8fc1\u79fb",permalink:"/gorm/docs/migration"}},d={},m=[{value:"\u94fe\u5f0f\u65b9\u6cd5",id:"\u94fe\u5f0f\u65b9\u6cd5",level:2},{value:'<span id="finisher_method">Finisher \u65b9\u6cd5</span>',id:"finisher-\u65b9\u6cd5",level:2},{value:'<span id="goroutine_safe">New Session Method</span>',id:"new-session-method",level:2}],p={toc:m};function h(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"GORM \u5141\u8bb8\u8fdb\u884c\u94fe\u5f0f\u64cd\u4f5c\uff0c\u6240\u4ee5\u60a8\u53ef\u4ee5\u50cf\u8fd9\u6837\u5199\u4ee3\u7801\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db.Where("name = ?", "jinzhu").Where("age = ?", 18).First(&user)\n')),(0,i.kt)("p",null,"GORM \u4e2d\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u65b9\u6cd5\uff1a ",(0,i.kt)("inlineCode",{parentName:"p"},"\u94fe\u5f0f\u65b9\u6cd5"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"Finisher \u65b9\u6cd5"),"\u3001",(0,i.kt)("inlineCode",{parentName:"p"},"\u65b0\u5efa\u4f1a\u8bdd\u65b9\u6cd5")),(0,i.kt)("p",null,"After a ",(0,i.kt)("inlineCode",{parentName:"p"},"Chain method"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Finisher Method"),", GORM returns an initialized ",(0,i.kt)("inlineCode",{parentName:"p"},"*gorm.DB")," instance, which is NOT safe to reuse anymore, or new generated SQL might be polluted by the previous conditions, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'queryDB := DB.Where("name = ?", "jinzhu")\n\nqueryDB.First(&user)\n// SELECT * FROM users WHERE name = "jinzhu"\n\nqueryDB.Where("name = ?", "jinzhu2").First(&user2)\n// SELECT * FROM users WHERE name = "jinzhu" AND name = "jinzhu2"\n')),(0,i.kt)("p",null,"In order to reuse a initialized ",(0,i.kt)("inlineCode",{parentName:"p"},"*gorm.DB")," instance, you can use a ",(0,i.kt)("inlineCode",{parentName:"p"},"New Session Method")," to create a shareable ",(0,i.kt)("inlineCode",{parentName:"p"},"*gorm.DB"),", e.g:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'queryDB := DB.Where("name = ?", "jinzhu").Session(&gorm.Session{})\n\nqueryDB.First(&user)\n// SELECT * FROM users WHERE name = "jinzhu"\n\nqueryDB.Where("name = ?", "jinzhu2").First(&user2)\n// SELECT * FROM users WHERE name = "jinzhu2"\n')),(0,i.kt)("h2",{id:"\u94fe\u5f0f\u65b9\u6cd5"},"\u94fe\u5f0f\u65b9\u6cd5"),(0,i.kt)("p",null,"Chain methods are methods to modify or add ",(0,i.kt)("inlineCode",{parentName:"p"},"Clauses")," to current ",(0,i.kt)("inlineCode",{parentName:"p"},"Statement"),", like:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Where"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Select"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Omit"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Joins"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Scopes"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Preload"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Raw")," (",(0,i.kt)("inlineCode",{parentName:"p"},"Raw")," can't be used with other chainable methods to build SQL)..."),(0,i.kt)("p",null,"Here is ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/go-gorm/gorm/blob/master/chainable_api.go"},"the full lists"),", also check out the ",(0,i.kt)("a",{parentName:"p",href:"sql_builder.html"},"SQL Builder")," for more details about ",(0,i.kt)("inlineCode",{parentName:"p"},"Clauses"),"."),(0,i.kt)("h2",{id:"finisher-\u65b9\u6cd5"},(0,i.kt)("span",{id:"finisher_method"},"Finisher \u65b9\u6cd5")),(0,i.kt)("p",null,"Finishers are immediate methods that execute registered callbacks, which will generate and execute SQL, like those methods:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Create"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"First"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Find"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Take"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Save"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Update"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Delete"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Scan"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Row"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Rows"),"..."),(0,i.kt)("p",null,"Check out ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/go-gorm/gorm/blob/master/finisher_api.go"},"the full lists")," here."),(0,i.kt)("h2",{id:"new-session-method"},(0,i.kt)("span",{id:"goroutine_safe"},"New Session Method")),(0,i.kt)("p",null,"GORM defined ",(0,i.kt)("inlineCode",{parentName:"p"},"Session"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"WithContext"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Debug")," methods as ",(0,i.kt)("inlineCode",{parentName:"p"},"New Session Method"),", refer ",(0,i.kt)("a",{parentName:"p",href:"session.html"},"Session")," for more details."),(0,i.kt)("p",null,"After a ",(0,i.kt)("inlineCode",{parentName:"p"},"Chain method"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Finisher Method"),", GORM returns an initialized ",(0,i.kt)("inlineCode",{parentName:"p"},"*gorm.DB")," instance, which is NOT safe to reuse anymore, you should use a ",(0,i.kt)("inlineCode",{parentName:"p"},"New Session Method")," to mark the ",(0,i.kt)("inlineCode",{parentName:"p"},"*gorm.DB")," as shareable."),(0,i.kt)("p",null,"Let's explain it with examples:"),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})\n// db is a new initialized `*gorm.DB`, which is safe to reuse\n\ndb.Where("name = ?", "jinzhu").Where("age = ?", 18).Find(&users)\n// `Where("name = ?", "jinzhu")` is the first chain method call, it will create an initialized `*gorm.DB` instance, aka `*gorm.Statement`\n// `Where("age = ?", 18)` is the second chain method call, it reuses the above `*gorm.Statement`, adds new condition `age = 18` to it\n// `Find(&users)` is a finisher method, it executes registered Query Callbacks, which generates and runs the following SQL:\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age = 18;\n\ndb.Where("name = ?", "jinzhu2").Where("age = ?", 20).Find(&users)\n// `Where("name = ?", "jinzhu2")` is also the first chain method call, it creates a new `*gorm.Statement`\n// `Where("age = ?", 20)` reuses the above `Statement`, and add conditions to it\n// `Find(&users)` is a finisher method, it executes registered Query Callbacks, generates and runs the following SQL:\n// SELECT * FROM users WHERE name = \'jinzhu2\' AND age = 20;\n\ndb.Find(&users)\n// `Find(&users)` is a finisher method call, it also creates a new `Statement` and executes registered Query Callbacks, generates and runs the following SQL:\n// SELECT * FROM users;\n')),(0,i.kt)("p",null,"(Bad) Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})\n// db is a new initialized *gorm.DB, which is safe to reuse\n\ntx := db.Where("name = ?", "jinzhu")\n// `Where("name = ?", "jinzhu")` returns an initialized `*gorm.Statement` instance after chain method `Where`, which is NOT safe to reuse\n\n// good case\ntx.Where("age = ?", 18).Find(&users)\n// `tx.Where("age = ?", 18)` use the above `*gorm.Statement`, adds new condition to it\n// `Find(&users)` is a finisher method call, it executes registered Query Callbacks, generates and runs the following SQL:\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age = 18\n\n// bad case\ntx.Where("age = ?", 28).Find(&users)\n// `tx.Where("age = ?", 18)` also use the above `*gorm.Statement`, and keep adding conditions to it\n// So the following generated SQL is polluted by the previous conditions:\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age = 18 AND age = 28;\n')),(0,i.kt)("p",null,"Example 3:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})\n// db is a new initialized *gorm.DB, which is safe to reuse\n\ntx := db.Where("name = ?", "jinzhu").Session(&gorm.Session{})\ntx := db.Where("name = ?", "jinzhu").WithContext(context.Background())\ntx := db.Where("name = ?", "jinzhu").Debug()\n// `Session`, `WithContext`, `Debug` returns `*gorm.DB` marked as safe to reuse, newly initialized `*gorm.Statement` based on it keeps current conditions\n\n// good case\ntx.Where("age = ?", 18).Find(&users)\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age = 18\n\n// good case\ntx.Where("age = ?", 28).Find(&users)\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age = 28;\n')))}h.isMDXComponent=!0}}]);