"use strict";(self.webpackChunkgorm=self.webpackChunkgorm||[]).push([[1854],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return c}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),l=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),m=l(r),c=a,E=m["".concat(o,".").concat(c)]||m[c]||p[c]||s;return r?t.createElement(E,i(i({ref:n},d),{},{components:r})):t.createElement(E,i({ref:n},d))}));function c(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=m;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var l=2;l<s;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4340:function(e,n,r){r.r(n),r.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return p}});var t=r(7462),a=r(3366),s=(r(7294),r(3905)),i=["components"],u={title:"\u67e5\u8be2",layout:"page"},o=void 0,l={unversionedId:"query",id:"query",title:"\u67e5\u8be2",description:"\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61",source:"@site/docs/query.md",sourceDirName:".",slug:"/query",permalink:"/gorm/docs/query",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/query.md",tags:[],version:"current",frontMatter:{title:"\u67e5\u8be2",layout:"page"},sidebar:"tutorialSidebar",previous:{title:"Prometheus",permalink:"/gorm/docs/prometheus"},next:{title:"Scopes",permalink:"/gorm/docs/scopes"}},d={},p=[{value:"\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61",id:"\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61",level:2},{value:"\u7528\u4e3b\u952e\u68c0\u7d22",id:"\u7528\u4e3b\u952e\u68c0\u7d22",level:3},{value:"\u68c0\u7d22\u5168\u90e8\u5bf9\u8c61",id:"\u68c0\u7d22\u5168\u90e8\u5bf9\u8c61",level:2},{value:"\u6761\u4ef6",id:"\u6761\u4ef6",level:2},{value:"String \u6761\u4ef6",id:"string-\u6761\u4ef6",level:3},{value:"Struct &amp; Map \u6761\u4ef6",id:"struct--map-\u6761\u4ef6",level:3},{value:'<span id="specify_search_fields">\u6307\u5b9a\u7ed3\u6784\u4f53\u67e5\u8be2\u5b57\u6bb5</span>',id:"\u6307\u5b9a\u7ed3\u6784\u4f53\u67e5\u8be2\u5b57\u6bb5",level:3},{value:'<span id="inline_conditions">\u5185\u8054\u6761\u4ef6</span>',id:"\u5185\u8054\u6761\u4ef6",level:3},{value:"Not \u6761\u4ef6",id:"not-\u6761\u4ef6",level:3},{value:"Or \u6761\u4ef6",id:"or-\u6761\u4ef6",level:3},{value:"\u9009\u62e9\u7279\u5b9a\u5b57\u6bb5",id:"\u9009\u62e9\u7279\u5b9a\u5b57\u6bb5",level:2},{value:"Order",id:"order",level:2},{value:"Limit &amp; Offset",id:"limit--offset",level:2},{value:"Group By &amp; Having",id:"group-by--having",level:2},{value:"Distinct",id:"distinct",level:2},{value:"Joins",id:"joins",level:2},{value:"Joins \u9884\u52a0\u8f7d",id:"joins-\u9884\u52a0\u8f7d",level:3},{value:"Joins a Derived Table",id:"joins-a-derived-table",level:3},{value:'<span id="scan">Scan</span>',id:"scan",level:2}],m={toc:p};function c(e){var n=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61"},"\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61"),(0,s.kt)("p",null,"GORM \u63d0\u4f9b\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"First"),"\u3001",(0,s.kt)("inlineCode",{parentName:"p"},"Take"),"\u3001",(0,s.kt)("inlineCode",{parentName:"p"},"Last")," \u65b9\u6cd5\uff0c\u4ee5\u4fbf\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u5355\u4e2a\u5bf9\u8c61\u3002\u5f53\u67e5\u8be2\u6570\u636e\u5e93\u65f6\u5b83\u6dfb\u52a0\u4e86 ",(0,s.kt)("inlineCode",{parentName:"p"},"LIMIT 1")," \u6761\u4ef6\uff0c\u4e14\u6ca1\u6709\u627e\u5230\u8bb0\u5f55\u65f6\uff0c\u5b83\u4f1a\u8fd4\u56de ",(0,s.kt)("inlineCode",{parentName:"p"},"ErrRecordNotFound")," \u9519\u8bef"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"// \u83b7\u53d6\u7b2c\u4e00\u6761\u8bb0\u5f55\uff08\u4e3b\u952e\u5347\u5e8f\uff09\ndb.First(&user)\n// SELECT * FROM users ORDER BY id LIMIT 1;\n\n// \u83b7\u53d6\u4e00\u6761\u8bb0\u5f55\uff0c\u6ca1\u6709\u6307\u5b9a\u6392\u5e8f\u5b57\u6bb5\ndb.Take(&user)\n// SELECT * FROM users LIMIT 1;\n\n// \u83b7\u53d6\u6700\u540e\u4e00\u6761\u8bb0\u5f55\uff08\u4e3b\u952e\u964d\u5e8f\uff09\ndb.Last(&user)\n// SELECT * FROM users ORDER BY id DESC LIMIT 1;\n\nresult := db.First(&user)\nresult.RowsAffected // \u8fd4\u56de\u627e\u5230\u7684\u8bb0\u5f55\u6570\nresult.Error        // returns error or nil\n\n// \u68c0\u67e5 ErrRecordNotFound \u9519\u8bef\nerrors.Is(result.Error, gorm.ErrRecordNotFound)\n")),(0,s.kt)("p",null,"{% note warn %}\n\u5982\u679c\u4f60\u60f3\u907f\u514d",(0,s.kt)("inlineCode",{parentName:"p"},"ErrRecordNotFound"),"\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528",(0,s.kt)("inlineCode",{parentName:"p"},"Find"),"\uff0c\u6bd4\u5982",(0,s.kt)("inlineCode",{parentName:"p"},"db.Limit(1).Find(&user)"),"\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"Find"),"\u65b9\u6cd5\u53ef\u4ee5\u63a5\u53d7struct\u548cslice\u7684\u6570\u636e\u3002\n{% endnote %}"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"First")," \u548c ",(0,s.kt)("inlineCode",{parentName:"p"},"Last")," \u4f1a\u6839\u636e\u4e3b\u952e\u6392\u5e8f\uff0c\u5206\u522b\u67e5\u8be2\u7b2c\u4e00\u6761\u548c\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u3002 \u53ea\u6709\u5728\u76ee\u6807 struct \u662f\u6307\u9488\u6216\u8005\u901a\u8fc7 ",(0,s.kt)("inlineCode",{parentName:"p"},"db.Model()")," \u6307\u5b9a model \u65f6\uff0c\u8be5\u65b9\u6cd5\u624d\u6709\u6548\u3002 \u6b64\u5916\uff0c\u5982\u679c\u76f8\u5173 model \u6ca1\u6709\u5b9a\u4e49\u4e3b\u952e\uff0c\u90a3\u4e48\u5c06\u6309 model \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u8fdb\u884c\u6392\u5e8f\u3002 \u4f8b\u5982:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'var user User\nvar users []User\n\n// works because destination struct is passed in\ndb.First(&user)\n// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1\n\n// works because model is specified using `db.Model()`\nresult := map[string]interface{}{}\ndb.Model(&User{}).First(&result)\n// SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1\n\n// doesn\'t work\nresult := map[string]interface{}{}\ndb.Table("users").First(&result)\n\n// works with Take\nresult := map[string]interface{}{}\ndb.Table("users").Take(&result)\n\n// no primary key defined, results will be ordered by first field (i.e., `Code`)\ntype Language struct {\n  Code string\n  Name string\n}\ndb.First(&Language{})\n// SELECT * FROM `languages` ORDER BY `languages`.`code` LIMIT 1\n')),(0,s.kt)("h3",{id:"\u7528\u4e3b\u952e\u68c0\u7d22"},"\u7528\u4e3b\u952e\u68c0\u7d22"),(0,s.kt)("p",null,"\u5982\u679c\u4e3b\u952e\u662f\u6570\u5b57\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,s.kt)("a",{parentName:"p",href:"#inline_conditions"},"\u5185\u8054\u6761\u4ef6")," \u6765\u68c0\u7d22\u5bf9\u8c61\u3002 \u4f20\u5165\u5b57\u7b26\u4e32\u53c2\u6570\u65f6\uff0c\u9700\u8981\u7279\u522b\u6ce8\u610f SQL \u6ce8\u5165\u95ee\u9898\uff0c\u67e5\u770b ",(0,s.kt)("a",{parentName:"p",href:"security.html"},"\u5b89\u5168")," \u83b7\u53d6\u8be6\u60c5."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.First(&user, 10)\n// SELECT * FROM users WHERE id = 10;\n\ndb.First(&user, "10")\n// SELECT * FROM users WHERE id = 10;\n\ndb.Find(&users, []int{1,2,3})\n// SELECT * FROM users WHERE id IN (1,2,3);\n')),(0,s.kt)("p",null,"\u5982\u679c\u4e3b\u952e\u662f\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\u50cf uuid\uff09\uff0c\u67e5\u8be2\u5c06\u88ab\u5199\u6210\u8fd9\u6837\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.First(&user, "id = ?", "1b74413f-f3b8-409f-ac47-e8c062e3472a")\n// SELECT * FROM users WHERE id = "1b74413f-f3b8-409f-ac47-e8c062e3472a";\n')),(0,s.kt)("p",null,"When the destination object has a primary value, the primary key will be used to build the condition, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"var user = User{ID: 10}\ndb.First(&user)\n// SELECT * FROM users WHERE id = 10;\n\nvar result User\ndb.Model(User{ID: 10}).First(&result)\n// SELECT * FROM users WHERE id = 10;\n")),(0,s.kt)("h2",{id:"\u68c0\u7d22\u5168\u90e8\u5bf9\u8c61"},"\u68c0\u7d22\u5168\u90e8\u5bf9\u8c61"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"// Get all records\nresult := db.Find(&users)\n// SELECT * FROM users;\n\nresult.RowsAffected // returns found records count, equals `len(users)`\nresult.Error        // returns error\n")),(0,s.kt)("h2",{id:"\u6761\u4ef6"},"\u6761\u4ef6"),(0,s.kt)("h3",{id:"string-\u6761\u4ef6"},"String \u6761\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// Get first matched record\ndb.Where("name = ?", "jinzhu").First(&user)\n// SELECT * FROM users WHERE name = \'jinzhu\' ORDER BY id LIMIT 1;\n\n// Get all matched records\ndb.Where("name <> ?", "jinzhu").Find(&users)\n// SELECT * FROM users WHERE name <> \'jinzhu\';\n\n// IN\ndb.Where("name IN ?", []string{"jinzhu", "jinzhu 2"}).Find(&users)\n// SELECT * FROM users WHERE name IN (\'jinzhu\',\'jinzhu 2\');\n\n// LIKE\ndb.Where("name LIKE ?", "%jin%").Find(&users)\n// SELECT * FROM users WHERE name LIKE \'%jin%\';\n\n// AND\ndb.Where("name = ? AND age >= ?", "jinzhu", "22").Find(&users)\n// SELECT * FROM users WHERE name = \'jinzhu\' AND age >= 22;\n\n// Time\ndb.Where("updated_at > ?", lastWeek).Find(&users)\n// SELECT * FROM users WHERE updated_at > \'2000-01-01 00:00:00\';\n\n// BETWEEN\ndb.Where("created_at BETWEEN ? AND ?", lastWeek, today).Find(&users)\n// SELECT * FROM users WHERE created_at BETWEEN \'2000-01-01 00:00:00\' AND \'2000-01-08 00:00:00\';\n')),(0,s.kt)("h3",{id:"struct--map-\u6761\u4ef6"},"Struct & Map \u6761\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// Struct\ndb.Where(&User{Name: "jinzhu", Age: 20}).First(&user)\n// SELECT * FROM users WHERE name = "jinzhu" AND age = 20 ORDER BY id LIMIT 1;\n\n// Map\ndb.Where(map[string]interface{}{"name": "jinzhu", "age": 20}).Find(&users)\n// SELECT * FROM users WHERE name = "jinzhu" AND age = 20;\n\n// Slice of primary keys\ndb.Where([]int64{20, 21, 22}).Find(&users)\n// SELECT * FROM users WHERE id IN (20, 21, 22);\n')),(0,s.kt)("p",null,"{% note warn %}\n",(0,s.kt)("strong",{parentName:"p"},"NOTE")," When querying with struct, GORM will only query with non-zero fields, that means if your field's value is ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"''"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," or other ",(0,s.kt)("a",{parentName:"p",href:"https://tour.golang.org/basics/12"},"zero values"),", it won't be used to build query conditions, for example:\n{% endnote %}"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Where(&User{Name: "jinzhu", Age: 0}).Find(&users)\n// SELECT * FROM users WHERE name = "jinzhu";\n')),(0,s.kt)("p",null,"To include zero values in the query conditions, you can use a map, which will include all key-values as query conditions, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Where(map[string]interface{}{"Name": "jinzhu", "Age": 0}).Find(&users)\n// SELECT * FROM users WHERE name = "jinzhu" AND age = 0;\n')),(0,s.kt)("p",null,"For more details, see ",(0,s.kt)("a",{parentName:"p",href:"#specify_search_fields"},"Specify Struct search fields"),"."),(0,s.kt)("h3",{id:"\u6307\u5b9a\u7ed3\u6784\u4f53\u67e5\u8be2\u5b57\u6bb5"},(0,s.kt)("span",{id:"specify_search_fields"},"\u6307\u5b9a\u7ed3\u6784\u4f53\u67e5\u8be2\u5b57\u6bb5")),(0,s.kt)("p",null,"When searching with struct, you can specify which particular values from the struct to use in the query conditions by passing in the relevant field name or the dbname to ",(0,s.kt)("inlineCode",{parentName:"p"},"Where()"),", for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Where(&User{Name: "jinzhu"}, "name", "Age").Find(&users)\n// SELECT * FROM users WHERE name = "jinzhu" AND age = 0;\n\ndb.Where(&User{Name: "jinzhu"}, "Age").Find(&users)\n// SELECT * FROM users WHERE age = 0;\n')),(0,s.kt)("h3",{id:"\u5185\u8054\u6761\u4ef6"},(0,s.kt)("span",{id:"inline_conditions"},"\u5185\u8054\u6761\u4ef6")),(0,s.kt)("p",null,"Query conditions can be inlined into methods like ",(0,s.kt)("inlineCode",{parentName:"p"},"First")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Find")," in a similar way to ",(0,s.kt)("inlineCode",{parentName:"p"},"Where"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// Get by primary key if it were a non-integer type\ndb.First(&user, "id = ?", "string_primary_key")\n// SELECT * FROM users WHERE id = \'string_primary_key\';\n\n// Plain SQL\ndb.Find(&user, "name = ?", "jinzhu")\n// SELECT * FROM users WHERE name = "jinzhu";\n\ndb.Find(&users, "name <> ? AND age > ?", "jinzhu", 20)\n// SELECT * FROM users WHERE name <> "jinzhu" AND age > 20;\n\n// Struct\ndb.Find(&users, User{Age: 20})\n// SELECT * FROM users WHERE age = 20;\n\n// Map\ndb.Find(&users, map[string]interface{}{"age": 20})\n// SELECT * FROM users WHERE age = 20;\n')),(0,s.kt)("h3",{id:"not-\u6761\u4ef6"},"Not \u6761\u4ef6"),(0,s.kt)("p",null,"Build NOT conditions, works similar to ",(0,s.kt)("inlineCode",{parentName:"p"},"Where")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Not("name = ?", "jinzhu").First(&user)\n// SELECT * FROM users WHERE NOT name = "jinzhu" ORDER BY id LIMIT 1;\n\n// Not In\ndb.Not(map[string]interface{}{"name": []string{"jinzhu", "jinzhu 2"}}).Find(&users)\n// SELECT * FROM users WHERE name NOT IN ("jinzhu", "jinzhu 2");\n\n// Struct\ndb.Not(User{Name: "jinzhu", Age: 18}).First(&user)\n// SELECT * FROM users WHERE name <> "jinzhu" AND age <> 18 ORDER BY id LIMIT 1;\n\n// Not In slice of primary keys\ndb.Not([]int64{1,2,3}).First(&user)\n// SELECT * FROM users WHERE id NOT IN (1,2,3) ORDER BY id LIMIT 1;\n')),(0,s.kt)("h3",{id:"or-\u6761\u4ef6"},"Or \u6761\u4ef6"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Where("role = ?", "admin").Or("role = ?", "super_admin").Find(&users)\n// SELECT * FROM users WHERE role = \'admin\' OR role = \'super_admin\';\n\n// Struct\ndb.Where("name = \'jinzhu\'").Or(User{Name: "jinzhu 2", Age: 18}).Find(&users)\n// SELECT * FROM users WHERE name = \'jinzhu\' OR (name = \'jinzhu 2\' AND age = 18);\n\n// Map\ndb.Where("name = \'jinzhu\'").Or(map[string]interface{}{"name": "jinzhu 2", "age": 18}).Find(&users)\n// SELECT * FROM users WHERE name = \'jinzhu\' OR (name = \'jinzhu 2\' AND age = 18);\n')),(0,s.kt)("p",null,"For more complicated SQL queries. please also refer to ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html#group_conditions"},"Group Conditions in Advanced Query"),"."),(0,s.kt)("h2",{id:"\u9009\u62e9\u7279\u5b9a\u5b57\u6bb5"},"\u9009\u62e9\u7279\u5b9a\u5b57\u6bb5"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Select")," allows you to specify the fields that you want to retrieve from database. Otherwise, GORM will select all fields by default."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Select("name", "age").Find(&users)\n// SELECT name, age FROM users;\n\ndb.Select([]string{"name", "age"}).Find(&users)\n// SELECT name, age FROM users;\n\ndb.Table("users").Select("COALESCE(age,?)", 42).Rows()\n// SELECT COALESCE(age,\'42\') FROM users;\n')),(0,s.kt)("p",null,"Also check out ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html#smart_select"},"Smart Select Fields")),(0,s.kt)("h2",{id:"order"},"Order"),(0,s.kt)("p",null,"Specify order when retrieving records from the database"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Order("age desc, name").Find(&users)\n// SELECT * FROM users ORDER BY age desc, name;\n\n// Multiple orders\ndb.Order("age desc").Order("name").Find(&users)\n// SELECT * FROM users ORDER BY age desc, name;\n\ndb.Clauses(clause.OrderBy{\n  Expression: clause.Expr{SQL: "FIELD(id,?)", Vars: []interface{}{[]int{1, 2, 3}}, WithoutParentheses: true},\n}).Find(&User{})\n// SELECT * FROM users ORDER BY FIELD(id,1,2,3)\n')),(0,s.kt)("h2",{id:"limit--offset"},"Limit & Offset"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Limit")," specify the max number of records to retrieve ",(0,s.kt)("inlineCode",{parentName:"p"},"Offset")," specify the number of records to skip before starting to return the records"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"db.Limit(3).Find(&users)\n// SELECT * FROM users LIMIT 3;\n\n// Cancel limit condition with -1\ndb.Limit(10).Find(&users1).Limit(-1).Find(&users2)\n// SELECT * FROM users LIMIT 10; (users1)\n// SELECT * FROM users; (users2)\n\ndb.Offset(3).Find(&users)\n// SELECT * FROM users OFFSET 3;\n\ndb.Limit(10).Offset(5).Find(&users)\n// SELECT * FROM users OFFSET 5 LIMIT 10;\n\n// Cancel offset condition with -1\ndb.Offset(10).Find(&users1).Offset(-1).Find(&users2)\n// SELECT * FROM users OFFSET 10; (users1)\n// SELECT * FROM users; (users2)\n")),(0,s.kt)("p",null,"Refer to ",(0,s.kt)("a",{parentName:"p",href:"scopes.html#pagination"},"Pagination")," for details on how to make a paginator"),(0,s.kt)("h2",{id:"group-by--having"},"Group By & Having"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'type result struct {\n  Date  time.Time\n  Total int\n}\n\ndb.Model(&User{}).Select("name, sum(age) as total").Where("name LIKE ?", "group%").Group("name").First(&result)\n// SELECT name, sum(age) as total FROM `users` WHERE name LIKE "group%" GROUP BY `name` LIMIT 1\n\n\ndb.Model(&User{}).Select("name, sum(age) as total").Group("name").Having("name = ?", "group").Find(&result)\n// SELECT name, sum(age) as total FROM `users` GROUP BY `name` HAVING name = "group"\n\nrows, err := db.Table("orders").Select("date(created_at) as date, sum(amount) as total").Group("date(created_at)").Rows()\ndefer rows.Close()\nfor rows.Next() {\n  ...\n}\n\nrows, err := db.Table("orders").Select("date(created_at) as date, sum(amount) as total").Group("date(created_at)").Having("sum(amount) > ?", 100).Rows()\ndefer rows.Close()\nfor rows.Next() {\n  ...\n}\n\ntype Result struct {\n  Date  time.Time\n  Total int64\n}\ndb.Table("orders").Select("date(created_at) as date, sum(amount) as total").Group("date(created_at)").Having("sum(amount) > ?", 100).Scan(&results)\n')),(0,s.kt)("h2",{id:"distinct"},"Distinct"),(0,s.kt)("p",null,"Selecting distinct values from the model"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Distinct("name", "age").Order("name, age desc").Find(&results)\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Distinct")," works with ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html#pluck"},(0,s.kt)("inlineCode",{parentName:"a"},"Pluck"))," and ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html#count"},(0,s.kt)("inlineCode",{parentName:"a"},"Count"))," too"),(0,s.kt)("h2",{id:"joins"},"Joins"),(0,s.kt)("p",null,"Specify Joins conditions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'type result struct {\n  Name  string\n  Email string\n}\n\ndb.Model(&User{}).Select("users.name, emails.email").Joins("left join emails on emails.user_id = users.id").Scan(&result{})\n// SELECT users.name, emails.email FROM `users` left join emails on emails.user_id = users.id\n\nrows, err := db.Table("users").Select("users.name, emails.email").Joins("left join emails on emails.user_id = users.id").Rows()\nfor rows.Next() {\n  ...\n}\n\ndb.Table("users").Select("users.name, emails.email").Joins("left join emails on emails.user_id = users.id").Scan(&results)\n\n// multiple joins with parameter\ndb.Joins("JOIN emails ON emails.user_id = users.id AND emails.email = ?", "jinzhu@example.org").Joins("JOIN credit_cards ON credit_cards.user_id = users.id").Where("credit_cards.number = ?", "411111111111").Find(&user)\n')),(0,s.kt)("h3",{id:"joins-\u9884\u52a0\u8f7d"},"Joins \u9884\u52a0\u8f7d"),(0,s.kt)("p",null,"You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"Joins")," eager loading associations with a single SQL, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Joins("Company").Find(&users)\n// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id`;\n')),(0,s.kt)("p",null,"Join with conditions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Joins("Company", DB.Where(&Company{Alive: true})).Find(&users)\n// SELECT `users`.`id`,`users`.`name`,`users`.`age`,`Company`.`id` AS `Company__id`,`Company`.`name` AS `Company__name` FROM `users` LEFT JOIN `companies` AS `Company` ON `users`.`company_id` = `Company`.`id` AND `Company`.`alive` = true;\n')),(0,s.kt)("p",null,"For more details, please refer to ",(0,s.kt)("a",{parentName:"p",href:"preload.html"},"Preloading (Eager Loading)"),"."),(0,s.kt)("h3",{id:"joins-a-derived-table"},"Joins a Derived Table"),(0,s.kt)("p",null,"You can also use ",(0,s.kt)("inlineCode",{parentName:"p"},"Joins")," to join a derived table."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Id  int\n    Age int\n}\n\ntype Order struct {\n    UserId     int\n    FinishedAt *time.Time\n}\n\nquery := db.Table("order").Select("MAX(order.finished_at) as latest").Joins("left join user user on order.user_id = user.id").Where("user.age > ?", 18).Group("order.user_id")\ndb.Model(&Order{}).Joins("join (?) q on order.finished_at = q.latest", query).Scan(&results)\n// SELECT `order`.`user_id`,`order`.`finished_at` FROM `order` join (SELECT MAX(order.finished_at) as latest FROM `order` left join user user on order.user_id = user.id WHERE user.age > 18 GROUP BY `order`.`user_id`) q on order.finished_at = q.latest\n')),(0,s.kt)("h2",{id:"scan"},(0,s.kt)("span",{id:"scan"},"Scan")),(0,s.kt)("p",null,"Scanning results into a struct works similarly to the way we use ",(0,s.kt)("inlineCode",{parentName:"p"},"Find")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'type Result struct {\n  Name string\n  Age  int\n}\n\nvar result Result\ndb.Table("users").Select("name", "age").Where("name = ?", "Antonio").Scan(&result)\n\n// Raw SQL\ndb.Raw("SELECT name, age FROM users WHERE name = ?", "Antonio").Scan(&result)\n')))}c.isMDXComponent=!0}}]);