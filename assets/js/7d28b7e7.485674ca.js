"use strict";(self.webpackChunkgorm=self.webpackChunkgorm||[]).push([[1075],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return c}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=t.createContext({}),u=function(e){var n=t.useContext(i),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},m=function(e){var n=u(e.components);return t.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(a),c=r,g=p["".concat(i,".").concat(c)]||p[c]||d[c]||s;return a?t.createElement(g,l(l({ref:n},m),{},{components:a})):t.createElement(g,l({ref:n},m))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=p;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=a[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},518:function(e,n,a){a.r(n),a.d(n,{assets:function(){return m},contentTitle:function(){return i},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var t=a(7462),r=a(3366),s=(a(7294),a(3905)),l=["components"],o={title:"SQL \u6784\u5efa\u5668",layout:"page"},i=void 0,u={unversionedId:"sql_builder",id:"sql_builder",title:"SQL \u6784\u5efa\u5668",description:"\u539f\u751f SQL",source:"@site/docs/sql_builder.md",sourceDirName:".",slug:"/sql_builder",permalink:"/gorm/docs/sql_builder",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql_builder.md",tags:[],version:"current",frontMatter:{title:"SQL \u6784\u5efa\u5668",layout:"page"},sidebar:"tutorialSidebar",previous:{title:"Sharding",permalink:"/gorm/docs/sharding"},next:{title:"\u4e8b\u52a1",permalink:"/gorm/docs/transactions"}},m={},d=[{value:"\u539f\u751f SQL",id:"\u539f\u751f-sql",level:2},{value:'<span id="named_argument">\u547d\u540d\u53c2\u6570</span>',id:"\u547d\u540d\u53c2\u6570",level:2},{value:"DryRun \u6a21\u5f0f",id:"dryrun-\u6a21\u5f0f",level:2},{value:"ToSQL",id:"tosql",level:2},{value:"<code>Row</code> &amp; <code>Rows</code>",id:"row--rows",level:2},{value:"\u5c06 <code>sql.Rows</code> \u626b\u63cf\u81f3 model",id:"\u5c06-sqlrows-\u626b\u63cf\u81f3-model",level:2},{value:'<span id="connection">Connection</span>',id:"connection",level:2},{value:"Advanced",id:"advanced",level:2},{value:'<span id="clauses">\u5b50\u53e5\uff08Clause\uff09</span>',id:"\u5b50\u53e5clause",level:3},{value:"\u5b50\u53e5\u6784\u9020\u5668",id:"\u5b50\u53e5\u6784\u9020\u5668",level:3},{value:"\u5b50\u53e5\u9009\u9879",id:"\u5b50\u53e5\u9009\u9879",level:3},{value:"StatementModifier",id:"statementmodifier",level:3}],p={toc:d};function c(e){var n=e.components,a=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"\u539f\u751f-sql"},"\u539f\u751f SQL"),(0,s.kt)("p",null,"\u539f\u751f\u67e5\u8be2 SQL \u548c ",(0,s.kt)("inlineCode",{parentName:"p"},"Scan")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'type Result struct {\n  ID   int\n  Name string\n  Age  int\n}\n\nvar result Result\ndb.Raw("SELECT id, name, age FROM users WHERE name = ?", 3).Scan(&result)\n\ndb.Raw("SELECT id, name, age FROM users WHERE name = ?", 3).Scan(&result)\n\nvar age int\ndb.Raw("SELECT SUM(age) FROM users WHERE role = ?", "admin").Scan(&age)\n\nvar users []User\ndb.Raw("UPDATE users SET name = ? WHERE age = ? RETURNING id, name", "jinzhu", 20).Scan(&users)\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Exec")," \u539f\u751f SQL"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Exec("DROP TABLE users")\ndb.Exec("UPDATE orders SET shipped_at = ? WHERE id IN ?", time.Now(), []int64{1, 2, 3})\n\n// Exec with SQL Expression\ndb.Exec("UPDATE users SET money = ? WHERE name = ?", gorm.Expr("money * ? + ?", 10000, 1), "jinzhu")\n')),(0,s.kt)("p",null,"{% note warn %}\n",(0,s.kt)("strong",{parentName:"p"},"\u6ce8\u610f")," GORM \u5141\u8bb8\u7f13\u5b58\u9884\u7f16\u8bd1 SQL \u8bed\u53e5\u6765\u63d0\u9ad8\u6027\u80fd\uff0c\u67e5\u770b ",(0,s.kt)("a",{parentName:"p",href:"performance.html"},"\u6027\u80fd")," \u83b7\u53d6\u8be6\u60c5\n{% endnote %}"),(0,s.kt)("h2",{id:"\u547d\u540d\u53c2\u6570"},(0,s.kt)("span",{id:"named_argument"},"\u547d\u540d\u53c2\u6570")),(0,s.kt)("p",null,"GORM \u652f\u6301 ",(0,s.kt)("a",{parentName:"p",href:"https://tip.golang.org/pkg/database/sql/#NamedArg"},(0,s.kt)("inlineCode",{parentName:"a"},"sql.NamedArg")),"\u3001",(0,s.kt)("inlineCode",{parentName:"p"},"map[string]interface{}{}")," \u6216 struct \u5f62\u5f0f\u7684\u547d\u540d\u53c2\u6570\uff0c\u4f8b\u5982\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Where("name1 = @name OR name2 = @name", sql.Named("name", "jinzhu")).Find(&user)\n// SELECT * FROM `users` WHERE name1 = "jinzhu" OR name2 = "jinzhu"\n\ndb.Where("name1 = @name OR name2 = @name", map[string]interface{}{"name": "jinzhu2"}).First(&result3)\n// SELECT * FROM `users` WHERE name1 = "jinzhu2" OR name2 = "jinzhu2" ORDER BY `users`.`id` LIMIT 1\n\n// \u539f\u751f SQL \u53ca\u547d\u540d\u53c2\u6570\ndb.Raw("SELECT * FROM users WHERE name1 = @name OR name2 = @name2 OR name3 = @name",\n   sql.Named("name", "jinzhu1"), sql.Named("name2", "jinzhu2")).Find(&user)\n// SELECT * FROM users WHERE name1 = "jinzhu1" OR name2 = "jinzhu2" OR name3 = "jinzhu1"\n\ndb.Exec("UPDATE users SET name1 = @name, name2 = @name2, name3 = @name",\n   sql.Named("name", "jinzhunew"), sql.Named("name2", "jinzhunew2"))\n// UPDATE users SET name1 = "jinzhunew", name2 = "jinzhunew2", name3 = "jinzhunew"\n\ndb.Raw("SELECT * FROM users WHERE (name1 = @name AND name3 = @name) AND name2 = @name2",\n   map[string]interface{}{"name": "jinzhu", "name2": "jinzhu2"}).Find(&user)\n// SELECT * FROM users WHERE (name1 = "jinzhu" AND name3 = "jinzhu") AND name2 = "jinzhu2"\n\ntype NamedArgument struct {\n    Name string\n    Name2 string\n}\n\ndb.Raw("SELECT * FROM users WHERE (name1 = @Name AND name3 = @Name) AND name2 = @Name2",\n     NamedArgument{Name: "jinzhu", Name2: "jinzhu2"}).Find(&user)\n// SELECT * FROM users WHERE (name1 = "jinzhu" AND name3 = "jinzhu") AND name2 = "jinzhu2"\n')),(0,s.kt)("h2",{id:"dryrun-\u6a21\u5f0f"},"DryRun \u6a21\u5f0f"),(0,s.kt)("p",null,"\u5728\u4e0d\u6267\u884c\u7684\u60c5\u51b5\u4e0b\u751f\u6210 ",(0,s.kt)("inlineCode",{parentName:"p"},"SQL")," \u53ca\u5176\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u4e8e\u51c6\u5907\u6216\u6d4b\u8bd5\u751f\u6210\u7684 SQL\uff0c\u8be6\u60c5\u8bf7\u53c2\u8003 ",(0,s.kt)("a",{parentName:"p",href:"session.html"},"Session")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},"stmt := db.Session(&Session{DryRun: true}).First(&user, 1).Statement\nstmt.SQL.String() //=> SELECT * FROM `users` WHERE `id` = $1 ORDER BY `id`\nstmt.Vars         //=> []interface{}{1}\n")),(0,s.kt)("h2",{id:"tosql"},"ToSQL"),(0,s.kt)("p",null,"\u8fd4\u56de\u751f\u6210\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"SQL")," \u4f46\u4e0d\u6267\u884c\u3002"),(0,s.kt)("p",null,"GORM\u4f7f\u7528 database/sql \u7684\u53c2\u6570\u5360\u4f4d\u7b26\u6765\u6784\u5efa SQL \u8bed\u53e5\uff0c\u5b83\u4f1a\u81ea\u52a8\u8f6c\u4e49\u53c2\u6570\u4ee5\u907f\u514d SQL \u6ce8\u5165\uff0c\u4f46\u6211\u4eec\u4e0d\u4fdd\u8bc1\u751f\u6210 SQL \u7684\u5b89\u5168\uff0c\u8bf7\u53ea\u7528\u4e8e\u8c03\u8bd5\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'sql := DB.ToSQL(func(tx *gorm.DB) *gorm.DB {\n  return tx.Model(&User{}).Where("id = ?", 100).Limit(10).Order("age desc").Find(&[]User{})\n})\nsql //=> SELECT * FROM "users" WHERE id = 100 AND "users"."deleted_at" IS NULL ORDER BY age desc LIMIT 10\n')),(0,s.kt)("h2",{id:"row--rows"},(0,s.kt)("inlineCode",{parentName:"h2"},"Row")," & ",(0,s.kt)("inlineCode",{parentName:"h2"},"Rows")),(0,s.kt)("p",null,"\u83b7\u53d6 ",(0,s.kt)("inlineCode",{parentName:"p"},"*sql.Row")," \u7ed3\u679c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// \u4f7f\u7528 GORM API \u6784\u5efa SQL\nrow := db.Table("users").Where("name = ?", "jinzhu").Select("name", "age").Row()\nrow.Scan(&name, &age)\n\n// \u4f7f\u7528\u539f\u751f SQL\nrow := db.Raw("select name, age, email from users where name = ?", "jinzhu").Row()\nrow.Scan(&name, &age, &email)\n')),(0,s.kt)("p",null,"\u83b7\u53d6 ",(0,s.kt)("inlineCode",{parentName:"p"},"*sql.Rows")," \u7ed3\u679c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'// \u4f7f\u7528 GORM API \u6784\u5efa SQL\nrows, err := db.Model(&User{}).Where("name = ?", "jinzhu").Select("name, age, email").Rows()\ndefer rows.Close()\nfor rows.Next() {\n  rows.Scan(&name, &age, &email)\n\n  // \u4e1a\u52a1\u903b\u8f91...\n}\n\n// \u539f\u751f SQL\nrows, err := db.Raw("select name, age, email from users where name = ?", "jinzhu").Rows()\ndefer rows.Close()\nfor rows.Next() {\n  rows.Scan(&name, &age, &email)\n\n  // \u4e1a\u52a1\u903b\u8f91...\n}\n')),(0,s.kt)("p",null,"\u8f6c\u5230 ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html"},"FindInBatches")," \u83b7\u53d6\u5982\u4f55\u5728\u6279\u91cf\u4e2d\u67e5\u8be2\u548c\u5904\u7406\u8bb0\u5f55\u7684\u4fe1\u606f\uff0c \u8f6c\u5230 ",(0,s.kt)("a",{parentName:"p",href:"advanced_query.html#group_conditions"},"Group \u6761\u4ef6")," \u83b7\u53d6\u5982\u4f55\u6784\u5efa\u590d\u6742 SQL \u67e5\u8be2\u7684\u4fe1\u606f"),(0,s.kt)("h2",{id:"\u5c06-sqlrows-\u626b\u63cf\u81f3-model"},"\u5c06 ",(0,s.kt)("inlineCode",{parentName:"h2"},"sql.Rows")," \u626b\u63cf\u81f3 model"),(0,s.kt)("p",null,"\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"ScanRows")," \u5c06\u4e00\u884c\u8bb0\u5f55\u626b\u63cf\u81f3 struct\uff0c\u4f8b\u5982\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'rows, err := db.Model(&User{}).Where("name = ?", "jinzhu").Select("name, age, email").Rows() // (*sql.Rows, error)\ndefer rows.Close()\n\nvar user User\nfor rows.Next() {\n  // ScanRows \u5c06\u4e00\u884c\u626b\u63cf\u81f3 user\n  db.ScanRows(rows, &user)\n\n  // \u4e1a\u52a1\u903b\u8f91...\n}\n')),(0,s.kt)("h2",{id:"connection"},(0,s.kt)("span",{id:"connection"},"Connection")),(0,s.kt)("p",null,"Run mutliple SQL in same db tcp connection (not in a transaction)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Connection(func(tx *gorm.DB) error {\n  tx.Exec("SET my.role = ?", "admin")\n\n  tx.First(&User{})\n})\n')),(0,s.kt)("h2",{id:"advanced"},"Advanced"),(0,s.kt)("h3",{id:"\u5b50\u53e5clause"},(0,s.kt)("span",{id:"clauses"},"\u5b50\u53e5\uff08Clause\uff09")),(0,s.kt)("p",null,"GORM uses SQL builder generates SQL internally, for each operation, GORM creates a ",(0,s.kt)("inlineCode",{parentName:"p"},"*gorm.Statement")," object, all GORM APIs add/change ",(0,s.kt)("inlineCode",{parentName:"p"},"Clause")," for the ",(0,s.kt)("inlineCode",{parentName:"p"},"Statement"),", at last, GORM generated SQL based on those clauses"),(0,s.kt)("p",null,"For example, when querying with ",(0,s.kt)("inlineCode",{parentName:"p"},"First"),", it adds the following clauses to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Statement")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'clause.Select{Columns: "*"}\nclause.From{Tables: clause.CurrentTable}\nclause.Limit{Limit: 1}\nclause.OrderByColumn{\n  Column: clause.Column{Table: clause.CurrentTable, Name: clause.PrimaryKey},\n}\n')),(0,s.kt)("p",null,"Then GORM build finally querying SQL in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," callbacks like:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'Statement.Build("SELECT", "FROM", "WHERE", "GROUP BY", "ORDER BY", "LIMIT", "FOR")\n')),(0,s.kt)("p",null,"Which generate SQL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM `users` ORDER BY `users`.`id` LIMIT 1\n")),(0,s.kt)("p",null,"You can define your own ",(0,s.kt)("inlineCode",{parentName:"p"},"Clause")," and use it with GORM, it needs to implements ",(0,s.kt)("a",{parentName:"p",href:"https://pkg.go.dev/gorm.io/gorm/clause?tab=doc#Interface"},"Interface")),(0,s.kt)("p",null,"Check out ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/go-gorm/gorm/tree/master/clause"},"examples")," for reference"),(0,s.kt)("h3",{id:"\u5b50\u53e5\u6784\u9020\u5668"},"\u5b50\u53e5\u6784\u9020\u5668"),(0,s.kt)("p",null,"For different databases, Clauses may generate different SQL, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Offset(10).Limit(5).Find(&users)\n// Generated for SQL Server\n// SELECT * FROM "users" OFFSET 10 ROW FETCH NEXT 5 ROWS ONLY\n// Generated for MySQL\n// SELECT * FROM `users` LIMIT 5 OFFSET 10\n')),(0,s.kt)("p",null,"Which is supported because GORM allows database driver register Clause Builder to replace the default one, take the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/go-gorm/sqlserver/blob/512546241200023819d2e7f8f2f91d7fb3a52e42/sqlserver.go#L45"},"Limit")," as example"),(0,s.kt)("h3",{id:"\u5b50\u53e5\u9009\u9879"},"\u5b50\u53e5\u9009\u9879"),(0,s.kt)("p",null,"GORM defined ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/go-gorm/gorm/tree/master/clause"},"Many Clauses"),", and some clauses provide advanced options can be used for your application"),(0,s.kt)("p",null,"Although most of them are rarely used, if you find GORM public API can't match your requirements, may be good to check them out, for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'db.Clauses(clause.Insert{Modifier: "IGNORE"}).Create(&user)\n// INSERT IGNORE INTO users (name,age...) VALUES ("jinzhu",18...);\n')),(0,s.kt)("h3",{id:"statementmodifier"},"StatementModifier"),(0,s.kt)("p",null,"GORM provides interface ",(0,s.kt)("a",{parentName:"p",href:"https://pkg.go.dev/gorm.io/gorm?tab=doc#StatementModifier"},"StatementModifier")," allows you modify statement to match your requirements, take ",(0,s.kt)("a",{parentName:"p",href:"hints.html"},"Hints")," as example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-go"},'import "gorm.io/hints"\n\ndb.Clauses(hints.New("hint")).Find(&User{})\n// SELECT * /*+ hint */ FROM `users`\n')))}c.isMDXComponent=!0}}]);